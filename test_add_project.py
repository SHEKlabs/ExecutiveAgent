# test_add_project.py
import sys
import os
from src.project import ProjectManager

# Ensure src directory is in the Python path
# This might be needed depending on how you run the script
# sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


def test_direct_add():
    print("Attempting to add a project directly using ProjectManager...")
    
    project_manager = ProjectManager()
    
    # Sample project data (using frontend field names)
    # Note: 'id' is usually auto-generated by the database
    # 'Project' (DB) maps to 'name' (frontend)
    # 'Category/Section' (DB) maps to 'category' (frontend) - should be array
    # 'Tag' (DB) maps to 'tags' (frontend) - should be array
    sample_project = {
        "name": "Direct Test Project - Can Delete", 
        "description": "This is a test project added directly via script.",
        "category": ["Testing"],  # Send as array
        "owner": "Test Script",
        "tags": ["#Test", "#DirectAdd"], # Send as array
        "contributors": ["Script Runner"] 
        # "connected_project": [] # Optional
    }

    print(f"Sample project data being sent:\n{sample_project}")

    try:
        result = project_manager.add_project(sample_project)
        
        if result and len(result) > 0:
            print("\n--- SUCCESS ---")
            print("Project added successfully!")
            print("Response data:")
            # The result should be mapped back to frontend names by SupabaseClient
            print(result[0]) 
        else:
            print("\n--- FAILED ---")
            print("ProjectManager add_project was called, but returned no data or an empty list.")
            print(f"Raw result: {result}")

    except Exception as e:
        print("\n--- ERROR ---")
        print(f"An error occurred during add_project: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_direct_add() 